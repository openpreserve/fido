#!/usr/bin/env python

from unittest import main, TestCase

from fido.fido import Fido

class FidoTests(TestCase):

    def setUp(self):
        self.fido = Fido()

    def test_identify_files(self):
        i = list(self.fido.identify_files("test-data/fido.zip"))
        self.assertEqual(len(i), 6)

        self.assertEqual(i[0].filename, "test-data/fido.zip")
        self.assertEqual(i[0].puid, "x-fmt/263")

        self.assertEqual(i[1].filename, "test-data/fido.zip!Mercury/Mercury.jpg")
        self.assertEqual(i[1].puid, "fmt/44")

        self.assertEqual(i[2].filename, "test-data/fido.zip!Mercury/Mercury.xml")
        self.assertEqual(i[2].puid, "fmt/120")

        self.assertEqual(i[3].filename, "test-data/fido.zip!Mercury/Mercury.xml")
        self.assertEqual(i[3].puid, "fmt/120")

        self.assertEqual(i[4].filename, "test-data/fido.zip!__MACOSX/Mercury/._Mercury.xml")
        self.assertEqual(i[4].puid, "fmt/120")

        self.assertEqual(i[5].filename, "test-data/fido.zip!__MACOSX/Mercury/._Mercury.xml")
        self.assertEqual(i[5].puid, "fmt/120")

    def test_bmp(self):
        i = self.fido.identify_file("test-data/fido.bmp")
        self.assertEqual(i.puid, "fmt/116")
        self.assertEqual(i.formatname, "Windows Bitmap")
        self.assertEqual(i.signaturename, "Windows Bitmap 3.0")
        self.assertEqual(i.filesize, 230454)
        self.assertEqual(i.filename, "test-data/fido.bmp")
        self.assertEqual(i.mimetype, "image/bmp")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, "3.0")
        self.assertEqual(i.alias, "BMP (3.0)")
        self.assertEqual(i.apple_uti, "com.microsoft.bmp")
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_ps(self):
        i = self.fido.identify_file("test-data/fido.ps")
        self.assertEqual(i.puid, "x-fmt/406")
        self.assertEqual(i.formatname, "PostScript")
        self.assertEqual(i.signaturename, "PostScript DSC 2.0")
        self.assertEqual(i.filesize, 47365)
        self.assertEqual(i.filename, "test-data/fido.ps")
        self.assertEqual(i.mimetype, "application/postscript")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, "2.0")
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, "com.adobe.postscript")
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_kmz(self):
        i = self.fido.identify_file("test-data/fido.kmz")
        self.assertEqual(i.puid, "x-fmt/263")
        self.assertEqual(i.formatname, "ZIP Format")
        self.assertEqual(i.signaturename, "ZIP format")
        self.assertEqual(i.filesize, 17292)
        self.assertEqual(i.filename, "test-data/fido.kmz")
        self.assertEqual(i.mimetype, "application/zip")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, "com.pkware.zip-archive")
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_pps(self):
        i = self.fido.identify_file("test-data/fido.pps")
        self.assertEqual(i.puid, "fmt/111")
        self.assertEqual(i.formatname, "OLE2 Compound Document Format")
        self.assertEqual(i.signaturename, "OLE2 Compound Document Format")
        self.assertEqual(i.filesize, 2333696)
        self.assertEqual(i.filename, "test-data/fido.pps")
        self.assertEqual(i.mimetype, None)
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_tif(self):
        i = self.fido.identify_file("test-data/fido.tif")
        self.assertEqual(i.puid, "fmt/156")
        self.assertEqual(i.formatname, "Tagged Image File Format for Internet Fax (TIFF-FX)")
        self.assertEqual(i.signaturename, "TIFF-FX (big-endian, BOF)")
        self.assertEqual(i.filesize, 1271894)
        self.assertEqual(i.filename, "test-data/fido.tif")
        self.assertEqual(i.mimetype, "image/tiff")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, None) 
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_wp(self):
        i = self.fido.identify_file("test-data/fido.wp")
        self.assertEqual(i.puid, "x-fmt/394")
        self.assertEqual(i.formatname, "WordPerfect for MS-DOS/Windows Document")
        self.assertEqual(i.signaturename, "WordPerfect 5.1")
        self.assertEqual(i.filesize, 672936)
        self.assertEqual(i.filename, "test-data/fido.wp")
        self.assertEqual(i.mimetype, None)
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, "5.1")
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_ttf(self):
        i = self.fido.identify_file("test-data/fido.ttf")
        self.assertEqual(i.puid, "x-fmt/453")
        self.assertEqual(i.formatname, "TrueType Font")
        self.assertEqual(i.signaturename, "External")
        self.assertEqual(i.filesize, 130919)
        self.assertEqual(i.filename, "test-data/fido.ttf")
        self.assertEqual(i.mimetype, "application/octet-stream")
        self.assertEqual(i.matchtype, "extension")
        self.assertEqual(i.version, "n/a")
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_gz(self):
        i = self.fido.identify_file("test-data/fido.gz")
        self.assertEqual(i.puid, "x-fmt/266")
        self.assertEqual(i.formatname, "GZIP Format")
        self.assertEqual(i.signaturename, "GZIP format")
        self.assertEqual(i.filesize, 175349)
        self.assertEqual(i.filename, "test-data/fido.gz")
        self.assertEqual(i.mimetype, "application/x-gzip")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, "org.gnu.gnu-zip-archive")
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_dwf(self):
        i = self.fido.identify_file("test-data/fido.dwf")
        self.assertEqual(i.puid, "x-fmt/49")
        self.assertEqual(i.formatname, "AutoCAD Design Web Format")
        self.assertEqual(i.signaturename, "AutoCAD Design Web Format")
        self.assertEqual(i.filesize, 56873)
        self.assertEqual(i.filename, "test-data/fido.dwf")
        self.assertEqual(i.mimetype, "application/dwf")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_gif(self):
        i = self.fido.identify_file("test-data/fido.gif")
        self.assertEqual(i.puid, "fmt/4")
        self.assertEqual(i.formatname, "Graphics Interchange Format")
        self.assertEqual(i.signaturename, "GIF 1989a")
        self.assertEqual(i.filesize, 120908)
        self.assertEqual(i.filename, "test-data/fido.gif")
        self.assertEqual(i.mimetype, "image/gif")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, "1989a")
        self.assertEqual(i.alias, "GIF (1989a)")
        self.assertEqual(i.apple_uti, "com.compuserve.gif")
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_zip(self):
        i = self.fido.identify_file("test-data/fido.zip")
        self.assertEqual(i.puid, "x-fmt/263")
        self.assertEqual(i.formatname, "ZIP Format")
        self.assertEqual(i.signaturename, "ZIP format")
        self.assertEqual(i.filesize, 1190653)
        self.assertEqual(i.filename, "test-data/fido.zip")
        self.assertEqual(i.mimetype, "application/zip")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, "com.pkware.zip-archive")
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_pdf(self):
        i = self.fido.identify_file("test-data/fido.pdf")
        self.assertEqual(i.puid, "fmt/18")
        self.assertEqual(i.formatname, "Acrobat PDF 1.4 - Portable Document Format")
        self.assertEqual(i.signaturename, "PDF 1.4")
        self.assertEqual(i.filesize, 39586)
        self.assertEqual(i.filename, "test-data/fido.pdf")
        self.assertEqual(i.mimetype, "application/pdf")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, "1.4")
        self.assertEqual(i.alias, "PDF (1.4)")
        self.assertEqual(i.apple_uti, "com.adobe.pdf")
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_eps(self):
        i = self.fido.identify_file("test-data/fido.eps")
        self.assertEqual(i.puid, "fmt/124")
        self.assertEqual(i.formatname, "Encapsulated PostScript File Format")
        self.assertEqual(i.signaturename, "EPS 3.0")
        self.assertEqual(i.filesize, 90980)
        self.assertEqual(i.filename, "test-data/fido.eps")
        self.assertEqual(i.mimetype, "application/postscript")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, "3")
        self.assertEqual(i.alias, "EPS (3.0)")
        self.assertEqual(i.apple_uti, "com.adobe.encapsulated-postscript")
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_pst(self):
        i = self.fido.identify_file("test-data/fido.pst")
        self.assertEqual(i.puid, "x-fmt/249")
        self.assertEqual(i.formatname, "Microsoft Outlook Personal Folders (Unicode)")
        self.assertEqual(i.signaturename, "External")
        self.assertEqual(i.filesize, 10746)
        self.assertEqual(i.filename, "test-data/fido.pst")
        self.assertEqual(i.mimetype, None)
        self.assertEqual(i.matchtype, "extension")
        self.assertEqual(i.version, "2003-2007")
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_pub(self):
        i = self.fido.identify_file("test-data/fido.pub")
        self.assertEqual(i.puid, "x-fmt/257")
        self.assertEqual(i.formatname, "Microsoft Publisher")
        self.assertEqual(i.signaturename, "External")
        self.assertEqual(i.filesize, 49)
        self.assertEqual(i.filename, "test-data/fido.pub")
        self.assertEqual(i.mimetype, None)
        self.assertEqual(i.matchtype, "extension")
        self.assertEqual(i.version, "2002")
        self.assertEqual(i.alias, "Microsoft Publisher (XP)")
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_xlsx(self):
        i = self.fido.identify_file("test-data/fido.xlsx")
        self.assertEqual(i.puid, "fido-fmt/189.xl")
        self.assertEqual(i.formatname, "Microsoft Office Open XML - Excel")
        self.assertEqual(i.signaturename, "Microsoft Office Open XML - Excel")
        self.assertEqual(i.filesize, 55941)
        self.assertEqual(i.filename, "test-data/fido.xlsx")
        self.assertEqual(i.mimetype, None)
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_jpg(self):
        i = self.fido.identify_file("test-data/fido.jpg")
        self.assertEqual(i.puid, "fmt/44")
        self.assertEqual(i.formatname, "JPEG File Interchange Format")
        self.assertEqual(i.signaturename, "JFIF 1.02")
        self.assertEqual(i.filesize, 41572)
        self.assertEqual(i.filename, "test-data/fido.jpg")
        self.assertEqual(i.mimetype, "image/jpeg")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, "1.02")
        self.assertEqual(i.alias, "JFIF (1.02)")
        self.assertEqual(i.apple_uti, "public.jpeg")
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_sql(self):
        i = self.fido.identify_file("test-data/fido.sql")
        self.assertEqual(i.puid, "fmt/206")
        self.assertEqual(i.formatname, "Structured Query Language Data")
        self.assertEqual(i.signaturename, "External")
        self.assertEqual(i.filesize, 135251)
        self.assertEqual(i.filename, "test-data/fido.sql")
        self.assertEqual(i.mimetype, None)
        self.assertEqual(i.matchtype, "extension")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_kml(self):
        i = self.fido.identify_file("test-data/fido.kml")
        self.assertEqual(i.puid, "fmt/244")
        self.assertEqual(i.formatname, "Keyhole Markup Language")
        self.assertEqual(i.signaturename, "Keyhole Markup Language")
        self.assertEqual(i.filesize, 308537)
        self.assertEqual(i.filename, "test-data/fido.kml")
        self.assertEqual(i.mimetype, None)
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_docx(self):
        i = self.fido.identify_file("test-data/fido.docx")
        self.assertEqual(i.puid, "fido-fmt/189.word")
        self.assertEqual(i.formatname, "Microsoft Office Open XML - Word")
        self.assertEqual(i.signaturename, "Microsoft Office Open XML - Word")
        self.assertEqual(i.filesize, 39631)
        self.assertEqual(i.filename, "test-data/fido.docx")
        self.assertEqual(i.mimetype, None)
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_html(self):
        i = self.fido.identify_file("test-data/fido.html")
        self.assertEqual(i.puid, "fmt/96")
        self.assertEqual(i.formatname, "Hypertext Markup Language")
        self.assertEqual(i.signaturename, "HTML pre-2.0")
        self.assertEqual(i.filesize, 6664)
        self.assertEqual(i.filename, "test-data/fido.html")
        self.assertEqual(i.mimetype, "text/html")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, "HTML")
        self.assertEqual(i.apple_uti, "public.html")
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_pptx(self):
        i = self.fido.identify_file("test-data/fido.pptx")
        self.assertEqual(i.puid, "fido-fmt/189.ppt")
        self.assertEqual(i.formatname, "Microsoft Office Open XML - Powerpoint")
        self.assertEqual(i.signaturename, "Microsoft Office Open XML - Powerpoint")
        self.assertEqual(i.filesize, 4509649)
        self.assertEqual(i.filename, "test-data/fido.pptx")
        self.assertEqual(i.mimetype, None)
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_xml(self):
        i = self.fido.identify_file("test-data/fido.xml")
        self.assertEqual(i.puid, "fmt/101")
        self.assertEqual(i.formatname, "Extensible Markup Language")
        self.assertEqual(i.signaturename, "XML 1.0")
        self.assertEqual(i.filesize, 7522)
        self.assertEqual(i.filename, "test-data/fido.xml")
        self.assertEqual(i.mimetype, "text/xml")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, "1.0")
        self.assertEqual(i.alias, "XML (1.0)")
        self.assertEqual(i.apple_uti, "public.xml")
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_png(self):
        i = self.fido.identify_file("test-data/fido.png")
        self.assertEqual(i.puid, "fmt/11")
        self.assertEqual(i.formatname, "Portable Network Graphics")
        self.assertEqual(i.signaturename, "PNG 1.0")
        self.assertEqual(i.filesize, 999067)
        self.assertEqual(i.filename, "test-data/fido.png")
        self.assertEqual(i.mimetype, "image/png")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, "1.0")
        self.assertEqual(i.alias, "PNG (1.0)")
        self.assertEqual(i.apple_uti, "public.png")
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_xls(self):
        i = self.fido.identify_file("test-data/fido.xls")
        self.assertEqual(i.puid, "fmt/111")
        self.assertEqual(i.formatname, "OLE2 Compound Document Format")
        self.assertEqual(i.signaturename, "OLE2 Compound Document Format")
        self.assertEqual(i.filesize, 7883264)
        self.assertEqual(i.filename, "test-data/fido.xls")
        self.assertEqual(i.mimetype, None)
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_swf(self):
        i = self.fido.identify_file("test-data/fido.swf")
        self.assertEqual(i.puid, "fmt/108")
        self.assertEqual(i.formatname, "Macromedia Flash")
        self.assertEqual(i.signaturename, "SWF 5")
        self.assertEqual(i.filesize, 80468)
        self.assertEqual(i.filename, "test-data/fido.swf")
        self.assertEqual(i.mimetype, "application/x-shockwave-flash")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, "5")
        self.assertEqual(i.alias, "SWF (5)")
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_txt(self):
        i = self.fido.identify_file("test-data/fido.txt")
        self.assertEqual(i.puid, "x-fmt/111")
        self.assertEqual(i.formatname, "Plain Text File")
        self.assertEqual(i.signaturename, "External")
        self.assertEqual(i.filesize, 13150)
        self.assertEqual(i.filename, "test-data/fido.txt")
        self.assertEqual(i.mimetype, "text/plain")
        self.assertEqual(i.matchtype, "extension")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_ppt(self):
        i = self.fido.identify_file("test-data/fido.ppt")
        self.assertEqual(i.puid, "fmt/111")
        self.assertEqual(i.formatname, "OLE2 Compound Document Format")
        self.assertEqual(i.signaturename, "OLE2 Compound Document Format")
        self.assertEqual(i.filesize, 304640)
        self.assertEqual(i.filename, "test-data/fido.ppt")
        self.assertEqual(i.mimetype, None)
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_xbm(self):
        i = self.fido.identify_file("test-data/fido.xbm")
        self.assertEqual(i.puid, "x-fmt/207")
        self.assertEqual(i.formatname, "X-Windows Bitmap Image")
        self.assertEqual(i.signaturename, "X-Windows Bitmap Image X11")
        self.assertEqual(i.filesize, 287)
        self.assertEqual(i.filename, "test-data/fido.xbm")
        self.assertEqual(i.mimetype, "image/x-xbitmap")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, "X11")
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_csv(self):
        i = self.fido.identify_file("test-data/fido.csv")
        self.assertEqual(i.puid, "x-fmt/18")
        self.assertEqual(i.formatname, "Comma Separated Values")
        self.assertEqual(i.signaturename, "External")
        self.assertEqual(i.filesize, 38637)
        self.assertEqual(i.filename, "test-data/fido.csv")
        self.assertEqual(i.mimetype, "text/csv")
        self.assertEqual(i.matchtype, "extension")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

    def test_doc(self):
        i = self.fido.identify_file("test-data/fido.doc")
        self.assertEqual(i.puid, "fmt/40")
        self.assertEqual(i.formatname, "Microsoft Word for Windows Document")
        self.assertEqual(i.signaturename, "Microsoft Word for Windows 97 - 2002")
        self.assertEqual(i.filesize, 40960)
        self.assertEqual(i.filename, "test-data/fido.doc")
        self.assertEqual(i.mimetype, "application/msword")
        self.assertEqual(i.matchtype, "signature")
        self.assertEqual(i.version, None)
        self.assertEqual(i.alias, None)
        self.assertEqual(i.apple_uti, None)
        self.assertEqual(i.group_size, 1)
        self.assertEqual(i.group_index, 1)
        self.assertEqual(i.count, 1)

if __name__ == "__main__":
    main()
